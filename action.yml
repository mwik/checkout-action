name: checkout-action
description: GitHub Action for checking out a repository. (Simplified actions/checkout alternative that does not depend on Node.js.)
inputs:
  token:
    description: >
      Personal access token (PAT) used to fetch the repository. The PAT is configured
      with the local git config, which enables your scripts to run authenticated git
      commands. The post-job step removes the PAT.


      We recommend using a service account with the least permissions necessary.
      Also when generating a new PAT, select the least scopes necessary.


      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)
    default: ${{ github.token }}

  persist-credentials:
    description: 'Whether to configure the token or SSH key with the local git config'
    default: true

# Note:
# - inputs.* should be manually mapped to INPUT_* due to https://github.com/actions/runner/issues/665
# - Use GITHUB_*/RUNNER_* instead of github.*/runner.* due to https://github.com/actions/runner/issues/2185
runs:
  using: composite
  steps:
    - run: |
        set -eu
        if ! command -v bash >/dev/null; then
          if grep -Eq '^ID=alpine' /etc/os-release; then
            printf '::group::Install packages required for checkout-action (bash)\n'
            # NB: sync with apk_install in main.sh
            if command -v sudo >/dev/null; then
              sudo apk --no-cache add bash
            elif command -v doas >/dev/null; then
              doas apk --no-cache add bash
            else
              apk --no-cache add bash
            fi
            printf '::endgroup::\n'
          elif grep -Eq '^ID_LIKE=.*openwrt' /etc/os-release; then
            printf '::group::Install packages required for checkout-action (bash)\n'
            # NB: sync with opkg_install in main.sh
            if command -v sudo >/dev/null; then
              sudo mkdir -p /var/lock
              sudo opkg update
              sudo opkg install bash
            else
              mkdir -p /var/lock
              opkg update
              opkg install bash
            fi
            printf '::endgroup::\n'
          else
            printf '::error::checkout-action requires bash\n'
            exit 1
          fi
        fi
        bash --noprofile --norc "${GITHUB_ACTION_PATH:?}/main.sh"
      shell: sh
      if: runner.os	!= 'Windows'
    - run: bash --noprofile --norc "${GITHUB_ACTION_PATH:?}/main.sh"
      env:
        GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        INPUT_TOKEN: '${{ inputs.token }}'
        INPUT_PERSIST_CREDENTIALS: '${{ inputs.persist-credentials }}'
      shell: bash
      if: runner.os	== 'Windows'
